Перем  ИменаНотаций Экспорт;
Перем  Локации Экспорт;
Перем  ПоддерживаемыеТипыSwagger Экспорт;

#Область ПрограммныйИнтерфейс

Функция СведенияОВнешнейОбработке() Экспорт 
	
	ДанныеДляРег = Новый Структура();
	ДанныеДляРег.Вставить("Наименование", "озГенерацияSwagger");
	ДанныеДляРег.Вставить("БезопасныйРежим", Истина);
	ДанныеДляРег.Вставить("Версия", "ver.: 1.003"); 
	ДанныеДляРег.Вставить("ДатаВыпуска", "22.03.2024"); 	
	ДанныеДляРег.Вставить("Информация", "Обработка для создания корректирующих документов по остаткам");
	ДанныеДляРег.Вставить("Вид", "ДополнительнаяОбработка");  
	
	ТабЗнКоманды = Новый ТаблицаЗначений;
	ТабЗнКоманды.Колонки.Добавить("Идентификатор");
	ТабЗнКоманды.Колонки.Добавить("Использование");
	ТабЗнКоманды.Колонки.Добавить("Представление"); 
	
	НовСтрока = ТабЗнКоманды.Добавить();
	НовСтрока.Идентификатор = "ОткрытьОбработку";
	НовСтрока.Использование = "ОткрытиеФормы";
	НовСтрока.Представление = "Свертка по счетам";
	ДанныеДляРег.Вставить("Команды", ТабЗнКоманды);
	
	Возврат ДанныеДляРег;  
	
КонецФункции

Функция СформироватьSwaggerПоНотациям(МассивНотаций, Сервер="http://host/hs#") Экспорт
	
	Результат = Новый Структура("SwaggerJson, ТекстОшибки", "", "");
	
	СтруктураSwaggerJSON = Новый Структура();
	СтруктураSwaggerJSON.Вставить("openapi");
	СтруктураSwaggerJSON.Вставить("info");   
	СтруктураSwaggerJSON.Вставить("servers", Новый Массив); 
	СтруктураSwaggerJSON.Вставить("paths"); 
	
	СтруктураОписанияПолейНотации = ПолучитьСтруктуруОписанияПолейНотаций();	
	
	paths = Новый Структура;
	СоответсвиеКлючей = Новый Соответствие; 
	
	Сч = 0;
	
	ОшибкаФормированияSwaggerJson  = Ложь;
	
	Для каждого ТекстНотации из МассивНотаций Цикл
		
		МассивСтрок = СтрРазделить(ТекстНотации, Символы.ПС); 
		СодержаниеНотацийМетода = ПолучитьСодержаниеНотаций(МассивСтрок, СтруктураОписанияПолейНотации);
		МассивОшибок = ПроверитьСодержаниеНотаций(СодержаниеНотацийМетода, СтруктураОписанияПолейНотации); 
		Если МассивОшибок.Количество() Тогда
			Результат.ТекстОшибки = СтрШаблон("Обнаружены ошибки в нотации %1%2%1%3", Символы.ПС, ТекстНотации, СтрСоединить(МассивОшибок, Символы.ПС));			
			Возврат Результат; 
		Конецесли;
		
		СтруктураМетода = ПолучитьОписаниеСтруктурыМетода();
		ЗаполнитьСтруктуруМетодаПоСодержаниюНотаций(СтруктураМетода, СодержаниеНотацийМетода, СоответсвиеКлючей);
		
		СтруктураRouter = СодержаниеНотацийМетода.Получить(ИменаНотаций.Router)[0].СтруктураПолейНотации;
		router1с = ПереопределитьКлюч(СоответсвиеКлючей, СтруктураRouter.router);
		
		Если paths.Свойство(router1с) Тогда
			СтруктураПути = paths[router1с];
		Иначе   
			СтруктураПути = новый Структура();
			paths.Вставить(router1с, СтруктураПути);
		КонецЕсли;
		СтруктураПути.Вставить(НРег(СтруктураRouter.method), СтруктураМетода);
		
	КонецЦикла;
	
	СтруктураИнформации = Новый Структура;
	СтруктураИнформации.Вставить("description", СокрЛП(Метаданные.Синоним) + " API");
	СтруктураИнформации.Вставить("title", "API Server for " + СокрЛП(Метаданные.Синоним));
	СтруктураИнформации.Вставить("version", "1.0");
	
	СтруктураSwaggerJSON.openapi =  "3.0.3";
	СтруктураSwaggerJSON.info = СтруктураИнформации;   
	СтруктураSwaggerJSON.Вставить("components", ПолучитьСтруктуруСomponents());
	СтруктураSwaggerJSON.Вставить("security", ПолучитьМассивSecurity());
	
	СтруктураSwaggerJSON.paths = paths;  
	СтруктураSwaggerJSON.servers.Добавить(Новый Структура("url", Сервер));		
	SwaggerJSON = ПолучитьТекстJSON(СтруктураSwaggerJSON);	
	
	Для Каждого Элемент ИЗ СоответсвиеКлючей Цикл
		SwaggerJSON = СтрЗаменить(SwaggerJSON, Элемент.Значение, Элемент.Ключ);
	КонецЦИкла;
	
	Результат.SwaggerJSON = SwaggerJSON;
	
	Возврат Результат;
	
	
КонецФункции     

Функция ПолучитьТекстJSON(Данные, ТипSwagger=Неопределено)  Экспорт
	
	Если ТипSwagger = ПоддерживаемыеТипыSwagger.String Тогда
		Возврат Строка(Данные);
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные); 
	Возврат ЗаписьJSON.Закрыть(); 
	
КонецФункции 

Функция ПолучитьДанныеjson(СтрокаJSON) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);  		
	СтруктураДанных =  ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	Возврат СтруктураДанных;
	
КонецФункции  

Функция ПолучитьЗначениеСтроки(Знач ЗначениеСтрокой, ТипSwagger="") Экспорт
	
	Если ТипSwagger = ПоддерживаемыеТипыSwagger.String Тогда
		Возврат ЗначениеСтрокой;
	КонецЕсли;
	
	ЗначениеСтрокой = СокрЛП(ЗначениеСтрокой);
	Попытка
		Возврат  ПолучитьДанныеjson(ЗначениеСтрокой);
	Исключение
		Возврат   ЗначениеСтрокой;
	КонецПопытки;
	
КонецФункции 

Функция ПолучитьSchemaSwagger(Знач Значение) Экспорт
	

	МассивЭлементовТипа = Новый Массив;
	Если ТипЗнч(Значение)  = Тип("Структура") Тогда
		
		СтруктураОбъекта = ПолучитьSwaggerОписаниеОбъекта();
		Для Каждого Элемент ИЗ  Значение Цикл    
			СтруктураОбъекта.properties.Вставить(Элемент.Ключ, ПолучитьSchemaSwagger(Элемент.Значение));
		КонецЦикла;        
		
	ИначеЕсли ТипЗнч(Значение)  = Тип("Массив") Тогда
		
		СтруктураОбъекта = ПолучитьSwaggerиОписанияМассива();
		Если  НЕ Значение.Количество() Тогда
			ВызватьИсключение "Обнаружен пустой массив...."	
		КонецЕсли;                       
		СтруктураОбъекта.items = ПолучитьSchemaSwagger(Значение[0]);
	Иначе
		
		Если Значение = Неопределено Тогда
			ВызватьИсключение "Не удалась определить тип для поля"	
		КонецЕсли;
		
		СтруктураОбъекта = ПолучитьSwaggerОписаниеПоляОбъекта();
		СтруктураОбъекта.type =  ПолучитьТипSwaggerПоЗначению(Значение);
		СтруктураОбъекта.example =  Значение;
	КонецЕсли;
	
	Возврат СтруктураОбъекта;
	
КонецФункции 

Функция ПолучитьСтруктуруОписанияПолейНотаций() Экспорт	
	
	// @Tags		IDM
	// @Summary		IDM (Revoke client role POST)
	// @Description		Убирает роль у пользователя
	// @Router	/IDM/v1/RevokeClientRole [POST]
	// @Produce json
	// @Accept	json
	// @Param		Input		header		string		true		"Input"
	// <value>
	// false
	// </value>
	// @Success		200		{array}	array		"ааааа"
	// <value>
	// [
	// "be848f53-67e1-11ec-845d-78ac442a6dfe"
	// ]
	// </value>
	// @Failure		400		{string}	string		"не ок"
	// <value>
	// Неверный идентификатор роли
	// </value>
	// @Header		200		{string}		Тест		"Устанавливается для примера"
	// <value>
	// Тестовое значение
	// </value>	
	
	// @Tags
	Tags = СтруктураОписаниеНотации();	
	Tags.Множественная = Истина;
	Tags.РазметкаПолей.Вставить(0, "tag");
	Tags.МожетОтсутствовать = Ложь;
	
	// @Summary
	Summary = СтруктураОписаниеНотации();  
	Summary.Множественная = Истина;
	Summary.РазметкаПолей.Вставить(0, "summary"); 
	Summary.МожетОтсутствовать = Ложь; 
	
	// @Description
	Description = СтруктураОписаниеНотации();
	Description.Множественная = Истина;
	Description.РазметкаПолей.Вставить(0, "description");
	Description.МожетОтсутствовать = Ложь;
	
	// @Router
	Router = СтруктураОписаниеНотации();
	Router.Множественная = Истина;
	Router.РазметкаПолей.Вставить(0, "router");
	Router.РазметкаПолей.Вставить(1, "method");   
	Router.МожетОтсутствовать = Ложь;
	
	// @Produce
	Produce = СтруктураОписаниеНотации();
	Produce.Множественная = Ложь;
	Produce.РазметкаПолей.Вставить(0, "produce"); 
	Produce.МожетОтсутствовать = Ложь;
	
	// @Accept
	Accept = СтруктураОписаниеНотации();
	Accept.Множественная = Ложь;
	Accept.РазметкаПолей.Вставить(0, "accept");
	Accept.МожетОтсутствовать = Ложь;
	
	// @Param
	Param = СтруктураОписаниеНотации();
	Param.СодержитЗначение = Истина;
	Param.Множественная = Истина;
	Param.МожетОтсутствовать = Истина;	
	Param.РазметкаПолей.Вставить(0, "name");
	Param.РазметкаПолей.Вставить(1, "in");
	Param.РазметкаПолей.Вставить(2, "type");
	Param.РазметкаПолей.Вставить(3, "required");
	Param.РазметкаПолей.Вставить(4, "description");
	
	// @Success 
	Success = СтруктураОписаниеНотации();
	Success.СодержитЗначение = Истина;
	Success.Множественная = Истина;
	Success.РазметкаПолей.Вставить(0, "code");
	Success.РазметкаПолей.Вставить(2, "type");
	Success.РазметкаПолей.Вставить(3, "description");
	Success.МожетОтсутствовать = Ложь;
	
	// @Failure
	Failure = СтруктураОписаниеНотации();
	Failure.СодержитЗначение = Истина;	
	Failure.Множественная = Истина;
	Failure.РазметкаПолей.Вставить(0, "code");
	Failure.РазметкаПолей.Вставить(2, "type");
	Failure.РазметкаПолей.Вставить(3, "description");
	Failure.МожетОтсутствовать = Ложь;
	
	// @Header 
	Header = СтруктураОписаниеНотации();
	Header.СодержитЗначение = Истина;
	Header.Множественная = Истина;  
	Header.МожетОтсутствовать = Истина;
	Header.РазметкаПолей.Вставить(0, "code");
	Header.РазметкаПолей.Вставить(1, "type");
	Header.РазметкаПолей.Вставить(2, "name");  
	Header.РазметкаПолей.Вставить(3, "description");  
	
	СтруктураОписанияНотаций = Новый Структура;
	СтруктураОписанияНотаций.Вставить(ИменаНотаций.Tags,	Tags);  
	СтруктураОписанияНотаций.Вставить(ИменаНотаций.Summary,	Summary);
	СтруктураОписанияНотаций.Вставить(ИменаНотаций.Description, Description);
	СтруктураОписанияНотаций.Вставить(ИменаНотаций.Router, Router);
	СтруктураОписанияНотаций.Вставить(ИменаНотаций.Produce, Produce);
	СтруктураОписанияНотаций.Вставить(ИменаНотаций.Accept, Accept);
	СтруктураОписанияНотаций.Вставить(ИменаНотаций.Param, Param);
	СтруктураОписанияНотаций.Вставить(ИменаНотаций.Success, Success); 
	СтруктураОписанияНотаций.Вставить(ИменаНотаций.Failure, Failure);  
	СтруктураОписанияНотаций.Вставить(ИменаНотаций.Header, Header);  
	
	Возврат СтруктураОписанияНотаций;
	
КонецФункции 

Функция  ПолучитьСодержаниеНотаций(МассивСтрок, СтруктуруОписанияПолейНотаций) Экспорт 
	
	СодержаниеНотаций = Новый Соответствие;
	Для НомерСтроки = 0 по МассивСтрок.Количество() - 1 Цикл   
		
		ЗначениеНотации = НайтиЗначениеНотации(МассивСтрок[НомерСтроки], СтруктуруОписанияПолейНотаций);
		Если ЗначениеНотации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеНотации = СтруктуруОписанияПолейНотаций[ЗначениеНотации.Нотация];
		
		ТекстЗначения = Неопределено;
		Если ОписаниеНотации.СодержитЗначение = Истина Тогда    
			НомерСтроки = НомерСтроки+1;
			ТекстЗначения = ПолучитьПредставленияЗначения(МассивСтрок, НомерСтроки, СтруктуруОписанияПолейНотаций);
		Конецесли;
		
		ТекущийМассив = СодержаниеНотаций.Получить(ЗначениеНотации.Нотация); 
		Если ТекущийМассив = Неопределено Тогда   
			ТекущийМассив = Новый Массив; 
			СодержаниеНотаций.Вставить(ЗначениеНотации.Нотация,ТекущийМассив);
		КонецЕсли;    
		
		МассивПолейНотации =  ПолучитьМассивПолейНотации(ЗначениеНотации.ОписаниеНотации, ОписаниеНотации);
		СтруктураПолейНотации =  ПолучитьСтруктуруНотации(МассивПолейНотации, ОписаниеНотации.РазметкаПолей);
		ТекущийМассив.Добавить(Новый Структура("СтруктураПолейНотации, ТекстЗначения, ТекстаНотации", СтруктураПолейНотации, ТекстЗначения, ЗначениеНотации.ОписаниеНотации));
		
	КонецЦикла;
	
	Возврат СодержаниеНотаций;
	
КонецФункции 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
   
Функция ПолучитьМассивНотацийКонфигурации(СоответствиеПутей) Экспорт
	
	МассивНотаций = Новый Массив;    
	МассивФайлоМодулей = ПолучитьМассивПутейКМодулям(СоответствиеПутей);
	Для Каждого ИмяФайлаМодуляСервиса ИЗ МассивФайлоМодулей  Цикл	
		МассивНотацийФайла = ПолучитьМассивНотацийПоФайлуМодуля(ИмяФайлаМодуляСервиса); 
		Для Каждого НотацияФайла ИЗ МассивНотацийФайла Цикл
			МассивНотаций.Добавить(НотацияФайла);
		КонецЦикла;
		
	КонецЦикла;
	Возврат МассивНотаций;
	
КонецФункции 

Функция ОчиститьСтроку(СтрокаДляРазбора)
	
	СтрокаПоиска = СтрЗаменить(СокрЛП(СтрокаДляРазбора)," ", "");
	СтрокаПоиска = СтрЗаменить(СтрокаПоиска,Символы.Таб, "");
	
	Возврат НРег(СтрокаПоиска);
	
КонецФункции 

Функция ПолучитьМассивПутейКМодулям(СоответствиеПутей)
	
	Результат = Новый Массив;
	
	Для Каждого мтдTTPСервис ИЗ Метаданные.HTTPСервисы  Цикл	
		
		ПутьКМодулюСервиса 	= СтрШаблон("%1\HTTPServices\%2\Ext\Module.bsl", КаталогПроекта1с,  мтдTTPСервис.Имя);  
		АдресВХ = СоответствиеПутей[ПутьКМодулюСервиса];
		
		Если АдресВХ = Истина Тогда
			ИмяФайлаМодуля = ПутьКМодулюСервиса;	
		Иначе
			ИмяФайлаМодуля = ПолучитьИмяВременногоФайла("txt");
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВХ);
			ДвоичныеДанные.Записать(ИмяФайлаМодуля);
		КонецЕсли;
		
		ФайлМодуляСервиса 	= Новый Файл(ИмяФайлаМодуля); 
		Если НЕ ФайлМодуляСервиса.Существует() Тогда
			ВызватьИсключение СтрШаблон("Не найден модуль сервиса ""%1"" по адресу ""%2""", мтдTTPСервис.Имя, ПутьКМодулюСервиса);
		конецЕсли;
		Результат.Добавить(ИмяФайлаМодуля);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции 

Функция ПолучитьМассивНотацийПоФайлуМодуля(ИмяФайлаМодуляСервиса)
	
	МассивНотаций =  Новый Массив;

	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайлаМодуляСервиса);

	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	ТекущийМетод = "";
	СтрокиТекущегоМетода = Новый Массив;
	
	
	СтартНотаций = Ложь;
	
	СтруктураОписанияПолейНотации = ПолучитьСтруктуруОписанияПолейНотаций();
	
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		
		СтрокаДляРазбора = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
		СтрокаПоиска = ОчиститьСтроку(СтрокаДляРазбора);
		
		Если  СтартНотаций И Лев(СтрокаПоиска, 7) = "функция" Тогда
			
			СтрокаПоиска = СтрЗаменить(СтрокаПоиска, "функция", ""); 
			ТекущийМетод = Сред(СтрокаПоиска,1,СтрНайти(СтрокаПоиска, "(")-1);
			МассивНотаций.Добавить(СтрСоединить(СтрокиТекущегоМетода, Символы.ПС));
			СтрокиТекущегоМетода.Очистить(); 
			СтартНотаций = Ложь;
			
		ИначеЕсли СтартНотаций И Лев(СтрокаПоиска, 12) = "конецфункции" ИЛИ  Лев(СтрокаПоиска, 14) = "конецпроцедуры"  Тогда
			
			СтартНотаций = Ложь;
			СтрокиТекущегоМетода.Очистить(); 
			
		ИначеЕсли СтартНотаций = Истина Тогда
			
			СтрокиТекущегоМетода.Добавить(СтрокаДляРазбора); 
			
		ИначеЕсли  НайтиЗначениеНотации(СтрокаПоиска, СтруктураОписанияПолейНотации)  <> Неопределено Тогда
			
			СтартНотаций = Истина;
			СтрокиТекущегоМетода.Добавить(СтрокаДляРазбора); 
			
		КонецЕсли;
		
	КонецЦикла;
	Возврат МассивНотаций;
		
КонецФункции

Функция ПереопределитьКлюч(СоответсвиеКлючей, Значение)
	
	Результат  = СоответсвиеКлючей.Получить(Значение); 
	Если Результат = Неопределено Тогда
		Результат = "_" + СтрЗаменить(Новый УникальныйИдентификатор(),"-","");
		СоответсвиеКлючей.Вставить(Значение, Результат); 
	КонецЕсли; 		
	Возврат Результат;
	
КонецФункции 

Процедура ЗаполнитьСтруктуруМетодаПоСодержаниюНотаций(СтруктураМетода, СодержаниеНотацийМетода, СоответсвиеКлючей)
	
	Для Каждого Элемент ИЗ СтруктураМетода Цикл
		
		МассивНотаций = ПолучитьНотацциюПоКлючуSwagger(Элемент.Ключ); 
		Для Каждого Нотация ИЗ МассивНотаций Цикл
			
			СодержаниеНотаций = СодержаниеНотацийМетода.Получить(Нотация);
			Если СодержаниеНотаций = Неопределено Тогда
				Продолжить;
			Конецесли;
			
			Если Элемент.Ключ = "parameters" Тогда	
				Для Каждого ЭлементОписания ИЗ  СодержаниеНотаций Цикл
					
					Данные1с = ПолучитьЗначениеСтроки(ЭлементОписания.ТекстЗначения, ЭлементОписания.СтруктураПолейНотации.type);
					schema =  ПолучитьSchemaSwagger(Данные1с);
					required = Булево(ЭлементОписания.СтруктураПолейНотации.required);
					
					Если ЭлементОписания.СтруктураПолейНотации.in = Локации.body Тогда
						
						СтруктураМетода.Вставить("requestBody", ПолучитьСтруктуруRequestBody(required, schema,  СоответсвиеКлючей));
						
					Иначе
						
						НовыйПараметр = ПолучитьСтруктуруПараметраМетодаSwagger(); 
						НовыйПараметр.description = ЭлементОписания.СтруктураПолейНотации.description;
						НовыйПараметр.name = ЭлементОписания.СтруктураПолейНотации.name;
						НовыйПараметр.in  =   ЭлементОписания.СтруктураПолейНотации.in;
						НовыйПараметр.required =  required;
						НовыйПараметр.schema =  schema;
						СтруктураМетода.parameters.Добавить(НовыйПараметр);  
						
					КонецЕсли;
					
				КонецЦикла;  
				
			ИначеЕсли Элемент.Ключ = "responses" Тогда 
				
				Для Каждого ЭлементОписания ИЗ  СодержаниеНотаций Цикл
					
					Данные1с = ПолучитьЗначениеСтроки(ЭлементОписания.ТекстЗначения, ЭлементОписания.СтруктураПолейНотации.type);
					code = ПереопределитьКлюч(СоответсвиеКлючей, ЭлементОписания.СтруктураПолейНотации.code); 
					ОписаниеТипа = ПолучитьSchemaSwagger(Данные1с);
					НовыйРезультат = ПолучитьСтруктуруОтветаМетодаSwagger(code);
					НовыйРезультат.description = ЭлементОписания.СтруктураПолейНотации.description;  
					НовыйРезультат.content =  ПолучитьСтруктуруСontent(ОписаниеТипа,  СоответсвиеКлючей);
					
					ДобавитьЗаголовкиОтвета(НовыйРезультат, СодержаниеНотацийМетода,  ЭлементОписания.СтруктураПолейНотации.code, СоответсвиеКлючей);
					СтруктураМетода.responses.Вставить(code, НовыйРезультат);
					
				КонецЦикла;  	
				
			ИначеЕсли  Элемент.Ключ = "consumes" Тогда 
				
				СтруктураМетода.consumes.Добавить("application/" + СодержаниеНотаций[0].СтруктураПолейНотации.accept); 
				
			ИначеЕсли  Элемент.Ключ = "produces" Тогда
				
				СтруктураМетода.produces.Добавить("application/" + СодержаниеНотаций[0].СтруктураПолейНотации.produce); 
				
			ИначеЕсли  Элемент.Ключ = "tags" Тогда 
				
				СтруктураМетода.tags.Добавить(СодержаниеНотаций[0].СтруктураПолейНотации.tag); 
				
			ИначеЕсли  Элемент.Ключ = "description" Тогда 
				
				СтруктураМетода.Description = СодержаниеНотаций[0].СтруктураПолейНотации.Description; 					
			ИначеЕсли  Элемент.Ключ = "summary" Тогда 
				СтруктураМетода.summary = СодержаниеНотаций[0].СтруктураПолейНотации.summary; 
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры   

Процедура ДобавитьЗаголовкиОтвета(СтруктураРезультат, СодержаниеНотацийМетода, КодОтвета, СоответсвиеКлючей)
	
	ПараметрыЗаголовкаОтвета = Новый Массив;
	МассивПараметров = СодержаниеНотацийМетода.Получить(ИменаНотаций.Header);
	Если МассивПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;   
	
	Для Каждого СтруктураПараметраОтвета ИЗ МассивПараметров Цикл
		Если СтруктураПараметраОтвета.СтруктураПолейНотации.code = КодОтвета Тогда
			ПараметрыЗаголовкаОтвета.Добавить(СтруктураПараметраОтвета);
		КонецЕсли;
	КонецЦикла; 
	
	Если НЕ ПараметрыЗаголовкаОтвета.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураHeaders = Новый Структура;
	СтруктураРезультат.Вставить("headers", СтруктураHeaders);  
	
	Для Каждого Элемент ИЗ  ПараметрыЗаголовкаОтвета Цикл
		ИмяПараметра = ПереопределитьКлюч(СоответсвиеКлючей, Элемент.СтруктураПолейНотации.name); 
		СтруктураПараметра = Новый Структура();
		СтруктураHeaders.Вставить(ИмяПараметра, СтруктураПараметра);
		СтруктураПараметра.Вставить("description", Элемент.СтруктураПолейНотации.description); 
		Данные1с = ПолучитьЗначениеСтроки(Элемент.ТекстЗначения, Элемент.СтруктураПолейНотации.type);
		СтруктураПараметра.Вставить("schema", ПолучитьSchemaSwagger(Данные1с));
	КонецЦикла;
	
	
КонецПроцедуры

Функция ПолучитьСтруктуруОтветаМетодаSwagger(КодОтвета)
	
	Результат = Новый Структура;
	Результат.Вставить("description", "");
	Результат.Вставить("content", "");
	
	Возврат  Результат;
	
КонецФункции

Функция ПолучитьСтруктуруСomponents()
	
	basicAuth = Новый Структура;
	basicAuth.Вставить("type", "http");
	basicAuth.Вставить("scheme", "basic");
	
	securitySchemes = Новый Структура;
	securitySchemes.Вставить("basicAuth", basicAuth);
	
	components = Новый Структура;
	components.Вставить("securitySchemes", securitySchemes);  
	Возврат components;
	
КонецФункции 

Функция ПолучитьМассивSecurity()
	
	Результат = Новый Массив;
	Результат.Добавить(Новый Структура("BasicAuth", Новый Массив)); 
	Возврат Результат; 
	
КонецФункции 

Функция ПолучитьСтруктуруRequestBody(required, ОписаниеТипа,  СоответсвиеКлючей)
	
	requestBody =  Новый Структура(); 
	requestBody.Вставить("required", required);
	content = Новый Структура;
	requestBody.Вставить("content", ПолучитьСтруктуруСontent(ОписаниеТипа,  СоответсвиеКлючей));
	Возврат requestBody;
	
КонецФункции

Функция ПолучитьСтруктуруСontent(ОписаниеТипа,  СоответсвиеКлючей)
	
	Результат = Новый Структура;
	applicationJsonКлюч =  ПереопределитьКлюч(СоответсвиеКлючей,  "application/json");
	applicationJsonСтруктура = Новый Структура; 
	Результат.Вставить(applicationJsonКлюч, applicationJsonСтруктура);
	applicationJsonСтруктура.Вставить("schema", ОписаниеТипа);
	Возврат Результат;
	
КонецФункции 

Функция ПолучитьСтруктуруПараметраМетодаSwagger()
	
	СтруктураSwaggerJSON = Новый Структура;		
	СтруктураSwaggerJSON.Вставить("description", "");
	СтруктураSwaggerJSON.Вставить("name", "");
	СтруктураSwaggerJSON.Вставить("in", "");
	СтруктураSwaggerJSON.Вставить("required", false);
	СтруктураSwaggerJSON.Вставить("schema", "");
	
	Возврат  СтруктураSwaggerJSON;
	
КонецФункции 

Функция ПроверитьСодержаниеНотаций(СодержаниеНотацийМетода, СтруктураОписанияПолейНотации)
	
	МассивОшибок = Новый Массив;
	
	ПроблемаSuccessFailure = Ложь;
	
	Для Каждого Элемент ИЗ  СтруктураОписанияПолейНотации Цикл
		
		ОписаниеПолей = СодержаниеНотацийМетода.Получить(Элемент.ключ); 
		Если (ОписаниеПолей = Неопределено ИЛИ ОписаниеПолей.Количество()=0)  Тогда   
			
			Если  Элемент.Значение.МожетОтсутствовать = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			Если (Элемент.Ключ = ИменаНотаций.Success ИЛИ  Элемент.Ключ = ИменаНотаций.Failure ) Тогда
				Если	СодержаниеНотацийМетода.Получить(ИменаНотаций.Failure) = Неопределено 
					И СодержаниеНотацийМетода.Получить(ИменаНотаций.Success) = Неопределено 
					И  НЕ ПроблемаSuccessFailure Тогда
					МассивОшибок.Добавить(СтрШаблон("Не найдены нотации ""@%1"" ИЛИ ""@%2""",ИменаНотаций.Success, ИменаНотаций.Failure)); 
					ПроблемаSuccessFailure = Истина; 
				КонецЕсли;
			Иначе
				МассивОшибок.Добавить(СтрШаблон("Не найдена нотация ""@%1""", Элемент.ключ));
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;   
		
		Если Элемент.Значение.Множественная = Ложь И ОписаниеПолей.Количество()>1 Тогда
			МассивОшибок.Добавить(СтрШаблон("Дублируется нотация ""@%1""", 
			Элемент.Ключ));
		КонецЕсли;
		
		Для Каждого ОписаниеЭкзмемпляраТега ИЗ  ОписаниеПолей Цикл
			
			Если Элемент.Значение.СодержитЗначение = Истина И ОписаниеЭкзмемпляраТега.ТекстЗначения = Неопределено Тогда
				МассивОшибок.Добавить(СтрШаблон("После нотации ""@%1 %2""  Не определено значение тега ""<value> </value>""", 
				Элемент.Ключ,  	
				ОписаниеЭкзмемпляраТега.ТекстаНотации));
			КонецЕсли;
			
			Для Каждого ЭлементРазметки ИЗ Элемент.Значение.РазметкаПолей Цикл
				ЗначениеПоля = Неопределено;
				ОписаниеЭкзмемпляраТега.СтруктураПолейНотации.Свойство(ЭлементРазметки.Значение, ЗначениеПоля); 
				Если НЕ ЗначениеЗаполнено(ЗначениеПоля) Тогда
					МассивОшибок.Добавить(СтрШаблон("В нотации ""@%1 %2""  Не определено значение поля ""%3"" (ожидаемая позиция %4)", 
					Элемент.Ключ,  	
					ОписаниеЭкзмемпляраТега.ТекстаНотации,
					ЭлементРазметки.Значение,  
					ЭлементРазметки.Ключ+1));
				КонецЕсли;     
			КонецЦикла;                                               
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат  МассивОшибок;
	
КонецФункции 

Функция ПолучитьСтруктуруНотации(МассивПолейНотации, РазметкаПолей)
	
	Результат = Новый Структура;
	Для Сч=0 По  МассивПолейНотации.Количество()-1 Цикл
		ИмяПоля = РазметкаПолей.Получить(Сч);
		Если ИмяПоля = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеПоля = МассивПолейНотации[Сч];
		Результат.Вставить(ИмяПоля, ЗначениеПоля);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции 

Функция НайтиЗначениеНотации(Знач ЗначениеСтроки, СтруктуруОписанияПолейНотаций)
	
	ЗначениеСтрокиНРег = НРег(ЗначениеСтроки);
	Для Каждого Элемент ИЗ СтруктуруОписанияПолейНотаций Цикл
		СтрокаНотации = НРег("@" + Элемент.Ключ);
		Позиция =  СтрНайти(ЗначениеСтрокиНРег, СтрокаНотации);
		Если Позиция > 0 Тогда	
			Нотация = Элемент.Ключ;
			ОписаниеНотации = СокрЛП(Сред(ЗначениеСтроки, Позиция + СтрДлина(СтрокаНотации)));
			Возврат Новый Структура("Нотация, ОписаниеНотации", Нотация, ОписаниеНотации);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции   

Функция ПолучитьПредставленияЗначения(МассивСтрок, НачальныйНомер, СтруктуруОписанияПолейНотаций) 
	
	СтрокиЗначения = Новый Массив;
	
	СтартЗначения = Ложь; 
	ФинишьЗначения = Ложь; 
	
	Для НомерСтроки = НачальныйНомер по МассивСтрок.Количество() - 1 Цикл 
		
		СтрокаНрег =  УдалитьКомментарийИзСтроки( НРег(МассивСтрок[НомерСтроки])); 
		
		Если НайтиЗначениеНотации(СтрокаНрег, СтруктуруОписанияПолейНотаций) <> НЕопределено Тогда
			НачальныйНомер = НачальныйНомер-1;
			Возврат Неопределено;
		КонецЕсли;
		
		
		Если  СтартЗначения И СтрНайти(СтрокаНрег, "</value>")>0 Тогда
			ФинишьЗначения = Истина;
			Прервать;		
		ИначеЕсли СтартЗначения = Истина Тогда
			СтрокиЗначения.Добавить(СокрЛП(УдалитьКомментарийИзСтроки(МассивСтрок[НомерСтроки])));
		ИначеЕсли СтрНайти(СтрокаНрег, "<value>")>0 Тогда
			СтартЗначения = Истина;
			Продолжить;
		КонецЕсли;	
	КонецЦикла;  
	
	Если СтартЗначения И ФинишьЗначения Тогда
		Возврат СтрСоединить(СтрокиЗначения, Символы.ПС);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции   

Функция ПолучитьМассивПолейНотации(СтрокаНотации, ОписаниеНотации)
	
	МассивСлов = Новый Массив;
	
	Если ОписаниеНотации.РазметкаПолей.Количество() = 1 Тогда
		Для Каждого Элемент ИЗ ОписаниеНотации.РазметкаПолей Цикл
			Если Элемент.Ключ = 0 Тогда
				МассивСлов.Добавить(СокрЛп(СтрокаНотации));
				Возврат МассивСлов;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтрДлина = СтрДлина(СтрокаНотации);
	
	СтартСлово = Ложь; 
	СтопСлово = Ложь;
	
	СимволыРазрыва = Новый Соответствие;
	СимволыРазрыва.Вставить(" ", Истина);
	СимволыРазрыва.Вставить(Символы.Таб, Истина);
	
	СпецСимволы = новый Соответствие;
	СпецСимволы.Вставить("""",""""); 
	СпецСимволы.Вставить("[","]");  
	СпецСимволы.Вставить("{","}");  
	
	
	ТекущееСлово = "";
	СимволаОкончания = Неопределено;
	
	Для Сч = 1  по СтрДлина Цикл 
		
		Символ = Сред(СтрокаНотации, Сч,1);
		ЭтоСимволРазрыва = СимволыРазрыва.Получить(Символ)<>Неопределено;
		
		Если СтартСлово = Истина И Символ = СимволаОкончания Тогда
			
			СтартСлово=Ложь;
			МассивСлов.Добавить(ТекущееСлово);  
			ТекущееСлово = "";
			
		ИначеЕсли СтартСлово = Истина И  ЭтоСимволРазрыва = Истина И СимволаОкончания=Неопределено  Тогда
			
			СтартСлово=Ложь; 
			МассивСлов.Добавить(ТекущееСлово);
			ТекущееСлово = "";
			
		ИначеЕсли  СтартСлово = Истина Тогда
			
			ТекущееСлово = ТекущееСлово+Символ;
			
		ИначеЕсли СтартСлово = Ложь  И НЕ ЭтоСимволРазрыва Тогда 
			
			СтартСлово = Истина;
			СимволаОкончания = СпецСимволы.Получить(Символ);
			Если СимволаОкончания <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ТекущееСлово = ТекущееСлово+Символ;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Если ТекущееСлово<>"" Тогда
		МассивСлов.Добавить(ТекущееСлово);
	КонецЕсли; 
	
	Возврат  МассивСлов;
	
КонецФункции 

Функция УдалитьКомментарийИзСтроки(Знач Строка)
	
	Возврат СокрЛП(Сред(Строка, СтрНайти(Строка, "//")+2));
	
КонецФункции 

Функция ПолучитьОписаниеСтруктурыМетода()    
	
	СтруктураМетода = Новый Структура(); 
	СтруктураМетода.Вставить("parameters", Новый Массив);
	СтруктураМетода.Вставить("tags",  Новый Массив); 
	СтруктураМетода.Вставить("description", "");  
	СтруктураМетода.Вставить("summary", ""); 
	СтруктураМетода.Вставить("responses", Новый Структура);    	
	Возврат СтруктураМетода;                                
	
КонецФункции

Функция СтруктураОписаниеНотации() 
	
	Результат = Новый Структура;
	Результат.Вставить("Множественная", Ложь);	
	Результат.Вставить("СодержитЗначение", Ложь);  
	Результат.Вставить("МожетОтсутствовать", Ложь);
	Результат.Вставить("РазметкаПолей", Новый Соответствие);
	Возврат  	Результат;
	
КонецФункции 

Функция ПолучитьСоответствиеИменВНотацияхСоSwagger()    
	
	СоответствиеИмен = Новый Соответствие();
	СоответствиеИмен.Вставить(ИменаНотаций.Tags, 		"tags");  
	СоответствиеИмен.Вставить(ИменаНотаций.Summary,		"summary");
	СоответствиеИмен.Вставить(ИменаНотаций.Description,	"description");
	СоответствиеИмен.Вставить(ИменаНотаций.Router, 		"router");
	СоответствиеИмен.Вставить(ИменаНотаций.Produce, 	"produces");
	СоответствиеИмен.Вставить(ИменаНотаций.Accept, 		"consumes");
	СоответствиеИмен.Вставить(ИменаНотаций.Param, 		"parameters");
	СоответствиеИмен.Вставить(ИменаНотаций.Success, 	"responses"); 
	СоответствиеИмен.Вставить(ИменаНотаций.Failure, 	"responses"); 
	Возврат СоответствиеИмен;
	
КонецФункции  

Функция ПолучитьНотацциюПоКлючуSwagger(КлючСваггер)   
	
	Массив = Новый Массив;
	ЭлементыСоответсвия = ПолучитьСоответствиеИменВНотацияхСоSwagger();
	Для Каждого Элемент ИЗ ЭлементыСоответсвия Цикл
		Если Элемент.Значение = КлючСваггер Тогда
			Массив.Добавить(Элемент.Ключ);
		КонецЕсли;		
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции 

Функция ПолучитьSwaggerОписаниеОбъекта()
	
	Результат = Новый Структура();
	Результат.Вставить("type", "object"); 
	Результат.Вставить("properties", Новый Структура); 	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьSwaggerиОписанияМассива()
	
	Результат = Новый Структура();
	Результат.Вставить("type", "array"); 
	Результат.Вставить("items", Новый Структура); 	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьSwaggerОписаниеПоляОбъекта()
	
	Результат = Новый Структура();
	Результат.Вставить("type", ""); 
	Результат.Вставить("example", Неопределено); 	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПоддерживаемыеТипыSwagger()
	
	Результат = Новый Структура();
	Результат.Вставить("number", "number");
	Результат.Вставить("boolean", "boolean");
	Результат.Вставить("object", "object");
	Результат.Вставить("string", "string");    
	Результат.Вставить("array", "array");    	
	Возврат Результат;
	
КонецФункции 

Функция ПолучитьПоддерживаемыеРазмещениеПараметров()
	
	Результат = Новый Структура(); 
	Результат.Вставить("header","header"); 
	Результат.Вставить("query","query");    
	Результат.Вставить("body","body"); 
	Результат.Вставить("path","path"); 
	Возврат  Результат;
	
КонецФункции 

Функция ПолучитьИменаНотаций()
	
	Результат =  Новый Структура;      
	Результат.Вставить("Tags","Tags"); 
	Результат.Вставить("Summary","Summary"); 
	Результат.Вставить("Description","Description"); 
	Результат.Вставить("Router","Router"); 
	Результат.Вставить("Produce","Produce"); 
	Результат.Вставить("Accept","Accept"); 	
	Результат.Вставить("Param","Param");
	Результат.Вставить("Success","Success");
	Результат.Вставить("Failure","Failure");   
	Результат.Вставить("Header","Header");   
	
	Возврат Результат;  
	
КонецФункции

Функция ПолучитьТипSwaggerПоЗначению(Значение1с)
	
	СоответсвиеТипов = Новый Соответствие;
	СоответсвиеТипов.Вставить(Тип("Число"), ПоддерживаемыеТипыSwagger.number);
	СоответсвиеТипов.Вставить(Тип("Булево"), ПоддерживаемыеТипыSwagger.boolean);
	СоответсвиеТипов.Вставить(Тип("Структура"), ПоддерживаемыеТипыSwagger.object);   
	СоответсвиеТипов.Вставить(Тип("Массив"), ПоддерживаемыеТипыSwagger.array);   
	СоответсвиеТипов.Вставить(Тип("Строка"), ПоддерживаемыеТипыSwagger.string);  
	СоответсвиеТипов.Вставить(Тип("Дата"), ПоддерживаемыеТипыSwagger.string);  
	
	ТипGO = СоответсвиеТипов.Получить(ТипЗнч(Значение1с));	 
	
	Возврат ТипGO;
	
КонецФункции 

#КонецОбласти  

ПоддерживаемыеТипыSwagger  = ПолучитьПоддерживаемыеТипыSwagger();	
Локации = ПолучитьПоддерживаемыеРазмещениеПараметров();
ИменаНотаций = ПолучитьИменаНотаций();
